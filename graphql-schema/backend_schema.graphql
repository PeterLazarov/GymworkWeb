"""
Autogenerated input type of AddSet
"""
input AddSetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  date: ISO8601DateTime!
  distanceMm: Int
  durationMs: Int
  exerciseId: ID!
  isWarmup: Boolean
  reps: Int
  restMs: Int
  speedKph: Float
  weightMcg: BigInt
  workoutStepId: ID!
}

"""
Autogenerated return type of AddSet.
"""
type AddSetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  set: WorkoutSet
}

"""
Autogenerated input type of AddStep
"""
input AddStepInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  exerciseIds: [ID!]!
  workoutDate: String!
}

"""
Autogenerated return type of AddStep.
"""
type AddStepPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  step: WorkoutStep
}

type BaseMeasurementConfig {
  moreIsBetter: Boolean
  unit: String
}

input BaseMeasurementConfigInput {
  moreIsBetter: Boolean
  unit: String
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Autogenerated input type of CreateExercise
"""
input CreateExerciseInput {
  """
  Optional active measurements of the exercise
  """
  activeMeasurements: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Optional instructions of the exercise
  """
  instructions: [String!]

  """
  Optional measurements of the exercise
  """
  measurements: MeasurementsInput

  """
  General muscle groups
  """
  muscleAreas: [String!]

  """
  Scientific muscle names
  """
  muscles: [String!]

  """
  Name of the exercise
  """
  name: String!
}

"""
Autogenerated return type of CreateExercise.
"""
type CreateExercisePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  exercise: Exercise
}

"""
Autogenerated input type of CreateWorkout
"""
input CreateWorkoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  date: ISO8601DateTime!
}

"""
Autogenerated return type of CreateWorkout.
"""
type CreateWorkoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  workout: Workout
}

"""
Autogenerated input type of DeleteExercise
"""
input DeleteExerciseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  exerciseId: ID!
}

"""
Autogenerated return type of DeleteExercise.
"""
type DeleteExercisePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}

"""
Autogenerated input type of DeleteSet
"""
input DeleteSetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  setId: ID!
}

"""
Autogenerated return type of DeleteSet.
"""
type DeleteSetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}

"""
Autogenerated input type of DeleteStep
"""
input DeleteStepInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  stepId: ID!
}

"""
Autogenerated return type of DeleteStep.
"""
type DeleteStepPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}

"""
Autogenerated input type of DeleteWorkout
"""
input DeleteWorkoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  workoutId: ID!
}

"""
Autogenerated return type of DeleteWorkout.
"""
type DeleteWorkoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}

type Exercise implements Node {
  activeMeasurements: [String!]!
  createdAt: ISO8601DateTime!
  equipment: [String!]!
  id: ID!
  images: [String!]!
  instructions: [String!]!
  isFavorite: Boolean!
  measurements: Measurements!
  muscleAreas: [String!]!
  muscles: [String!]!
  name: String!
  position: String
  stance: String
  steps: [WorkoutStep!]!
  tips: [String!]
  updatedAt: ISO8601DateTime!
  workoutSets: [WorkoutSet!]!
  workoutSteps: [WorkoutStep!]!
}

"""
The connection type for Exercise.
"""
type ExerciseConnection {
  """
  A list of edges.
  """
  edges: [ExerciseEdge]

  """
  A list of nodes.
  """
  nodes: [Exercise]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ExerciseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Exercise
}

input ExerciseFilter {
  equipment: [String!]
  isFavorite: Boolean
  muscleAreas: [String!]
  muscles: [String!]
  name: String
}

type ExerciseRecord {
  date: ISO8601Date!
  distance: Float
  exercise: Exercise!
  id: ID!
  reps: Int!
  weight: Float
  weightMcg: BigInt!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Measurements {
  distance: BaseMeasurementConfig
  duration: BaseMeasurementConfig
  reps: BaseMeasurementConfig
  speed: BaseMeasurementConfig
  weight: WeightMeasurementConfig
}

input MeasurementsInput {
  distance: BaseMeasurementConfigInput
  duration: BaseMeasurementConfigInput
  reps: BaseMeasurementConfigInput
  speed: BaseMeasurementConfigInput
  weight: WeightMeasurementConfigInput
}

type MuscleAreaStat {
  """
  The name of the muscle area
  """
  muscleArea: String!

  """
  Percentage of workouts that train this muscle area
  """
  percentage: Float!

  """
  Total number of workouts
  """
  totalWorkouts: Int!

  """
  Number of workouts that train this muscle area
  """
  workoutCount: Int!
}

type Mutation {
  """
  Add a set to a workout step with exercise metrics
  """
  addSet(
    """
    Parameters for AddSet
    """
    input: AddSetInput!
  ): AddSetPayload

  """
  Add a step to a workout with associated exercises
  """
  addStep(
    """
    Parameters for AddStep
    """
    input: AddStepInput!
  ): AddStepPayload

  """
  Create a new exercise
  """
  createExercise(
    """
    Parameters for CreateExercise
    """
    input: CreateExerciseInput!
  ): CreateExercisePayload

  """
  Creates a new workout with the specified date
  """
  createWorkout(
    """
    Parameters for CreateWorkout
    """
    input: CreateWorkoutInput!
  ): CreateWorkoutPayload

  """
  Delete an exercise if it's not being used in any workouts
  """
  deleteExercise(
    """
    Parameters for DeleteExercise
    """
    input: DeleteExerciseInput!
  ): DeleteExercisePayload

  """
  Delete a workout set
  """
  deleteSet(
    """
    Parameters for DeleteSet
    """
    input: DeleteSetInput!
  ): DeleteSetPayload

  """
  Delete a workout step and all its associated sets
  """
  deleteStep(
    """
    Parameters for DeleteStep
    """
    input: DeleteStepInput!
  ): DeleteStepPayload

  """
  Delete a workout and all its associated steps and sets
  """
  deleteWorkout(
    """
    Parameters for DeleteWorkout
    """
    input: DeleteWorkoutInput!
  ): DeleteWorkoutPayload

  """
  Update an exercise's details
  """
  updateExercise(
    """
    Parameters for UpdateExercise
    """
    input: UpdateExerciseInput!
  ): UpdateExercisePayload

  """
  Update a workout set's metrics
  """
  updateSet(
    """
    Parameters for UpdateSet
    """
    input: UpdateSetInput!
  ): UpdateSetPayload

  """
  Update application settings
  """
  updateSettings(
    """
    Parameters for UpdateSettings
    """
    input: UpdateSettingsInput!
  ): UpdateSettingsPayload

  """
  Update a workout's details
  """
  updateWorkout(
    """
    Parameters for UpdateWorkout
    """
    input: UpdateWorkoutInput!
  ): UpdateWorkoutPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  exercise(id: ID!): Exercise
  exerciseRecords(exerciseId: ID): [ExerciseRecord!]!
  exercises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: ExerciseFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExerciseConnection!
  muscleAreaStats(ascending: Boolean = false): [MuscleAreaStat!]!
  settings: Settings!
  workout(date: ISO8601Date, id: ID): Workout
  workouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: WorkoutFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkoutConnection!
}

type Settings implements Node {
  id: ID!
  measureRest: Boolean!
  previewNextSet: Boolean!
  scientificMuscleNamesEnabled: Boolean!
  showCommentsCard: Boolean!
  showSetCompletion: Boolean!
  showWorkoutTimer: Boolean!
  theme: String!
}

"""
Autogenerated input type of UpdateExercise
"""
input UpdateExerciseInput {
  """
  Optional active measurements of the exercise
  """
  activeMeasurements: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  exerciseId: ID!

  """
  Optional instructions of the exercise
  """
  instructions: [String!]

  """
  Optional measurements of the exercise
  """
  measurements: MeasurementsInput

  """
  General muscle groups
  """
  muscleAreas: [String!]

  """
  Scientific muscle names
  """
  muscles: [String!]

  """
  Name of the exercise
  """
  name: String!
}

"""
Autogenerated return type of UpdateExercise.
"""
type UpdateExercisePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  exercise: Exercise
}

"""
Autogenerated input type of UpdateSet
"""
input UpdateSetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  date: ISO8601DateTime
  distanceMm: Int
  durationMs: Int
  isWarmup: Boolean
  reps: Int
  restMs: Int
  setId: ID!
  speedKph: Float
  weightMcg: BigInt
}

"""
Autogenerated return type of UpdateSet.
"""
type UpdateSetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  set: WorkoutSet
}

"""
Autogenerated input type of UpdateSettings
"""
input UpdateSettingsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to measure rest time between sets
  """
  measureRest: Boolean

  """
  Whether to preview the next set
  """
  previewNextSet: Boolean

  """
  Whether to use scientific muscle names
  """
  scientificMuscleNamesEnabled: Boolean

  """
  Whether to show comments card
  """
  showCommentsCard: Boolean

  """
  Whether to show set completion UI
  """
  showSetCompletion: Boolean

  """
  Whether to show workout timer
  """
  showWorkoutTimer: Boolean

  """
  Theme preference (light/dark)
  """
  theme: String
}

"""
Autogenerated return type of UpdateSettings.
"""
type UpdateSettingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  settings: Settings
}

"""
Autogenerated input type of UpdateWorkout
"""
input UpdateWorkoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  date: ISO8601DateTime
  feeling: String
  notes: String
  pain: String
  rpe: Int
  workoutId: ID!
}

"""
Autogenerated return type of UpdateWorkout.
"""
type UpdateWorkoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  workout: Workout
}

type WeightMeasurementConfig {
  moreIsBetter: Boolean
  step: Float!
  unit: String
}

input WeightMeasurementConfigInput {
  moreIsBetter: Boolean
  step: Float
  unit: String
}

type Workout implements Node {
  createdAt: ISO8601DateTime!
  date: ISO8601Date!
  durationMs: Int
  endedAt: ISO8601DateTime
  feeling: String
  hasComments: Boolean!
  id: ID!
  muscleAreas: [String!]!
  muscles: [String!]!
  notes: String
  pain: String
  rpe: Int
  steps: [WorkoutStep!]!
  updatedAt: ISO8601DateTime!
  workoutSets: [WorkoutSet!]!
}

"""
The connection type for Workout.
"""
type WorkoutConnection {
  """
  A list of edges.
  """
  edges: [WorkoutEdge]

  """
  A list of nodes.
  """
  nodes: [Workout]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkoutEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Workout
}

input WorkoutFilter {
  date: ISO8601Date
  dateFrom: ISO8601Date
  dateTo: ISO8601Date
  feeling: String
  muscleAreas: [String!]
  muscles: [String!]
  notes: String
  pain: String
  rpe: String
}

type WorkoutSet implements Node {
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  date: ISO8601Date!
  distance: Float
  distanceMm: Int
  durationMs: Int
  exercise: Exercise!
  id: ID!
  isWarmup: Boolean!
  isWeakAssRecord: Boolean!
  reps: Int
  restMs: Int
  speedKph: Float
  updatedAt: ISO8601DateTime!
  weight: Float
  weightMcg: BigInt
  workoutStep: WorkoutStep!
}

type WorkoutStep implements Node {
  createdAt: ISO8601DateTime!
  exercises: [Exercise!]!
  id: ID!
  sets: [WorkoutSet!]!
  type: String!
  updatedAt: ISO8601DateTime!
  workout: Workout!
}
